apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: backstage
  title: Create AWS lambda
  description: Criação de AWS lambda
  tags: [rca0, medium, post]
spec:
  owner: rca0
  type: service
  parameters:
    - title: 'Dados'
      required: [name, description, memory, timeout]
      properties:
        name:
          title: 'Name'
          type: string
          description: 'Name of `lambda`'
          default: 'post-backstage-template'
          maxLength: 50
          pattern: '^[a-zA-Z0-9\-]*$'
          ui:autofocus: true
          ui:help: 'Maximum 50 characters. Allows letters, numbers and dash'
        description:
          title: 'Description'
          type: string
          description: 'Lambda description'
          maxLength: 100
          default: 'post-backstage-template'
          ui:autofocus: true
          ui:help: 'Briefly state the objective of your `lambda`'
        memory:
          title: 'Memory'
          type: integer
          description: 'Memory limit (MB) of the `lambda` function'
          enum:
          - 128
          - 256
          - 512
          default: 128
          ui:autofocus: true
          ui:help: 'The more memory, the higher the cost of `lambda`'
        timeout:
          title: 'Timeout'
          type: string
          description: 'Lambda execution timeout in seconds'
          default: '10'
          pattern: '^([1-9]|[1-9][0-9]|[1-8][0-9][0-9]|900)$'
          ui:autofocus: true
          ui:help: 'Up to 900 seconds limit'
        vpc:
          title: 'Virtual Private Cloud'
          type: boolean
          description: 'Select the `lambda` will need to access resources that are in the VPC'
          ui:help: 'Check if `lambda` will need to access resources that are in the VPC (e.g. RDS, Redis)'

    - title: 'Infra Repository'
      required: [repoUrl]
      properties:
        repoUrl:
          title: Repository
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - rca0
              
  steps:
    - id: fetch-base
      name: Applying the template (Lambda)
      action: fetch:template
      input:
        targetPath: backstage/${{ parameters.name }}/
        url: ./skeleton
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          memory: ${{ parameters.memory }}
          timeout: ${{ parameters.timeout }}
          vpc: ${{ parameters.vpc }}

    - id: publish_lambda
      name: Creating PR AWS Lambda
      action: publish:github:pull-request
      input:
        allowedHosts: ['github.com']
        repoUrl: ${{ parameters.repoUrl }}
        sourcePath: backstage
        targetPath: ./aws-lambda
        description: Lambda Code ${{ parameters.name }}.
        title: "feat: ${{ parameters.name }}"
        branchName: "feat-${{ parameters.name }}"

    # - id: register
    #   name: Register
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps.publish_lambda.output.repoContentsUrl }}
    #     catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Lambda Repository
        url: ${{steps.publish_lambda.output.remoteUrl}}
        text: "PR Lambda Code"
